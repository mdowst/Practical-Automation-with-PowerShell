# Listing 10 - Get-VulnerabilityStatus.Integration.Test.ps1
BeforeAll {
    # Import all your functions
    Set-Location -Path $PSScriptRoot
    . ".\Get-HotFixStatus.ps1"
    . ".\Find-KbSupersedence.ps1"
    . ".\Get-VulnerabilityStatus.ps1"
}

Describe 'Find-KbSupersedence not superseded' {
    BeforeAll {
        $Id = 'KB4521858'
        $Vulnerability = @{
            Id = $Id
            Product = 'Windows Server 2016'
            Computer = 'localhost'
        }
        # Build the Mock for ConvertFrom-Html
        Mock ConvertFrom-Html -ParameterFilter{ 
            $URI } -MockWith {
            $File = "$($URI.AbsoluteUri.Split('=')[-1]).html"
            $Path = Join-Path $PSScriptRoot $File
            ConvertFrom-Html -Path $Path
        }
    }
    Context "Patch Found" {
        # Mock Get-HotFix so the integration test thinks the patch is installed
        BeforeAll {
            Mock Get-HotFix {}
        }

        It "Patch is found on the computer" {
            $KBFound = Get-VulnerabilityStatus @Vulnerability
            $KBFound | Should -Be $Id
        }
    }
    
    Context "Patch Not Found" {
        # Mock Get-HotFix, so the integration test thinks the patch is not installed, and neither are any that supersedes it
        BeforeAll {
            Mock Get-HotFix { 
                throw ('GetHotFixNoEntriesFound,' +
                    'Microsoft.PowerShell.Commands.GetHotFixCommand')
            } 
        }
        It "Patch is not found on the computer" {
            $KBFound = Get-VulnerabilityStatus @Vulnerability
            $KBFound | Should -BeNullOrEmpty
        }
    }

    Context "Superseding Patch Found" {
        # Mock Get-HotFix, so that not installed is returned for any patch other than KB4565912
        BeforeAll {
            Mock Get-HotFix { 
                throw ('GetHotFixNoEntriesFound,' +
                    'Microsoft.PowerShell.Commands.GetHotFixCommand')
            } -ParameterFilter { $Id -ne 'KB4565912' }
            
            # Mock Get-HotFix, so that installed is returned only for KB4565912
            Mock Get-HotFix { } -ParameterFilter { 
                $Id -eq 'KB4565912' }
        }
        It "Superseding Patch is found on the computer" {
            $KBFound = Get-VulnerabilityStatus @Vulnerability
            $KBFound | Should -Be 'KB4565912'

            # Add the same ParameterFilters to the Should -Invoke to confirm they execute the expected number of time
            $cmd = 'Get-HotFix'
            Should -Invoke -CommandName $cmd -ParameterFilter { 
                $Id -ne 'KB4565912' } -Times 4
            Should -Invoke -CommandName $cmd -ParameterFilter { 
                $Id -eq 'KB4565912' } -Times 1 
        }
    }
}
